# Bill
# https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions
# work run time: each workflow run is limited 72 hours
# job queue time: limited 24 hours
# Api requests: execute up to 1000 API
# job matrix: can generate a maximum of 256 jobs per workflow run
# No more than 500 workflow runs can de queue in a 10 second interval per repo

name: github users deploy workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version tag(master is required), e.g. 0.0.1'
        required: false
        # default: 'v.0.0.1'
        type: string
      deployToStaging:
          description: 'deploy to staging'
          required: false
          type: boolean

  # push:
  #   branches:
  #     # change main to master
  #     - main
  #     # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags
  #     # will remove
      # - 'test/action/*'
  #     # Sequence of patterns matched against refs/tags
  #   # tags:
  #     # - release/**
  #     # # matches all version branching and tags with major version 1 or 2
  #     # - v[12].[0-9]+.[0.9]+
  # pull_request:
  #   branches: [main]

env:
  AWS_S3_BUCKET_PROD: prod
  AWS_S3_BUCKET_DEV: dev
  AWS_REGION: ap-northeast-1
  BUILD_FOLDER: build
  CLOUDFRONT_DEV_ID: dev1234
  CLOUDFRONT_STAGING_ID: staging1234
  CLOUDFRONT_PROD_ID: prod123
  ENV_DEV: develop
  ENV_PROD: production
  ENV_STAGING: staging

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: CI=false

      - name: Set variable(short sha, branch name)
        #  set variable should give it a id
        id: customize-var
        # set short-sha = $(git rev-parse --short=8 HEAD)"
        run: |
          echo "::set-output name=short-sha::$(git rev-parse --short=8 HEAD)"
          echo "::set-output name=build-time::$(TZ=Asia/Taipei date +'%Y-%m-%dT%H:%M:%S%z')"
          echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
          echo "::set-output name=event-name::${GITHUB_EVENT_NAME}"
          echo "::set-output name=actor::${GITHUB_ACTOR}"
          if ${{ steps.customize-var.outputs.branch == 'develop' && !github.event.inputs.deployToStaging }}; then
            echo "::set-output name=env::${{env.ENV_DEV}}"
          fi
          if ${{ steps.customize-var.outputs.branch == 'master' && !github.event.inputs.deployToStaging }}; then
            echo "::set-output name=env::${{env.ENV_PROD}}"
          fi
          if ${{ github.event.inputs.deployToStaging }}; then
            echo "::set-output name=env::${{env.ENV_STAGING}}"
          fi

      - name: check version whether or not require
        uses: actions/github-script@v3
        if: ${{steps.customize-var.outputs.env == env.ENV_PROD && !github.event.inputs.version}}
        with:
          script: |
            core.setFailed('version is required')

      # just review variable, can remove
      - name: Get variable(short sha, branch name)
        run: |
          echo "Short sha ${{steps.customize-var.outputs.short-sha}}"
          echo "branch ${{steps.customize-var.outputs.branch}}"
          echo "event name ${{steps.customize-var.outputs.event-name}}"
          echo "actor ${{steps.customize-var.outputs.actor}}"
          echo "env ${{steps.customize-var.outputs.env}}"
        # echo "version ${{steps.customize-var.outputs.version}}"

      - name: Add tag
        if: ${{github.event.inputs.version}}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # - name: Install dependencies
      #   # if: steps.yarn-cache.outputs.cache-hit != 'true'
      #   run: yarn install

      # 開發完成，最後再把註解拿掉
      # - name: Test
      #   run: yarn test

      # done: 暫時註解
      # - name: Configure AWS credentials dev
      #   if: ${{steps.customize-var.outputs.env == env.ENV_DEV}}
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{env.AWS_REGION}}

      # done: 暫時註解
      # - name: Configure AWS credentials prod
      #   if: ${{steps.customize-var.outputs == env.ENV_PROD}}
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{env.AWS_REGION}}

      # - name: Configure AWS credentials staging
      #   if: ${{steps.customize-var.outputs.env == env.ENV_STAGING}}
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{env.AWS_REGION}}

      # - name: Bump version and push tag
      #   id: tag_version
      #   uses: mathieudutour/github-tag-action@v6.0
      #   with:
      #     github_token: ${{ secrets.ACTION_GITHUB_TOKEN }}


      - name: Build dev static site
        if: ${{steps.customize-var.outputs.env == env.ENV_DEV}}
        run: yarn install && yarn build:dev

      - name: Build staging static site
        if: ${{steps.customize-var.outputs.env == env.ENV_STAGING}}
        run: yarn install && CI='' yarn build:staging

      - name: Build prod static site
        if: ${{steps.customize-var.outputs.env == env.ENV_PROD}}
        run: yarn install && yarn build

      # - name: Deploy static site to S3 bucket dev
      #   if: ${{steps.customize-var.outputs.env == env.ENV_DEV}}
      #   run: |
      #     aws s3 sync --delete./${BUILD_FOLDER} s3://$AWS_S3_BUCKET_DEV
      #     aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DEV_ID --paths "/*"

      # - name: Deploy static site to S3 bucket staging
      #   if: ${{steps.customize-var.outputs.env == env.ENV_STAGING}}
      #   run: |
      #     aws s3 sync --delete./${BUILD_FOLDER} s3://$AWS_S3_BUCKET_DEV
      #     aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_STAGING_ID --paths "/*"

      # - name: Deploy static site to S3 bucket prod
      #   if: ${{steps.customize-var.outputs.env == env.ENV.PROD}}
      #   run: |
      #     aws s3 sync --delete./${BUILD_FOLDER} s3://$AWS_S3_BUCKET_PROD
      #     aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_PROD_ID --paths "/*"

      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          author_name: ${{ steps.customize-var.outputs.actor }} deploy ${{ steps.customize-var.outputs.env }} sha ${{ steps.customize-var.outputs.short-sha }} version v${{ github.event.inputs.version }}
          # should be the same with above job name when job name has been changed
          job_name: build
          status: ${{ job.status }}
          fields: repo,commit,message,author,ref,took,job,workflow # default: repo,commit
          mention: channel
          if_mention: 'failure,success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
          MATRIX_CONTEXT: ${{ toJson(matrix) }} # required when fields contain jobs or tooks.
        if: always() # Pick up events even if the job fails or is canceled.

